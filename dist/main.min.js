(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/erikrekola/Awesome/GrannySlalom/src/js/entities/gramma.js":[function(require,module,exports){
var Gramma = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'gramma');
    game.add.existing(this);
    game.physics.enable(this, Phaser.Physics.ARCADE);
    this.anchor.setTo(0.5, 0.5);
    this.scale.set(2);
    this.smoothed = false;
    this.animations.add('run');
    this.animations.play('run', 10, true);
    this.body.bounce.setTo(1, 1);
    this.body.setSize(12, 10, 4, 26);
    this.body.mass = .5;
    this.body.collideWorldBounds = false;
    this.direction = Math.round(Math.random() * 1);
}

Gramma.prototype = Object.create(Phaser.Sprite.prototype);
Gramma.prototype.constructor = Gramma;

/**
 * Automatically called by World.update
 */
Gramma.prototype.update = function () {

    // Add speed to runner
    this.body.velocity.y = Math.random() * 100;

    if (this.direction == 1) {
        this.body.velocity.x = Math.random() * 10;
    } else {
        this.body.velocity.x = Math.random() * -10;
    }
};

module.exports = Gramma;

},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'runner');
    game.add.existing(this);
    game.physics.enable(this, Phaser.Physics.ARCADE);
    this.anchor.setTo(0.5, 0.5);
    this.scale.set(2);
    this.smoothed = false;
    this.animations.add('run');
    this.animations.play('run', 10, true);
    this.body.bounce.setTo(0, 0);
    this.body.setSize(18, 10, 3, 26);
    this.body.maxVelocity = new Phaser.Point(1000, 1000);
    this.body.collideWorldBounds = true;
    this.mass = 2;
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function () {

    // Add speed to runner
    if (this.body.velocity.x == 0) {
        this.body.velocity.y += 1;
    }
};

module.exports = Player;

},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(360, 640, Phaser.AUTO, 'grannyslalom-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/boot.js","./states/game":"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/game.js","./states/menu":"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/menu.js","./states/preloader":"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/preloader.js","./states/splash":"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/splash.js","./utils":"/Users/erikrekola/Awesome/GrannySlalom/src/js/utils.js"}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {
};

module.exports = Boot;

Boot.prototype = {

    preload: function () {
        this.load.image('preloader', 'assets/preloader.gif');
    },

    create: function () {
        this.game.input.maxPointers = 1;

        this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;

        this.game.state.start('Preloader');
    }
};

},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Gramma = require('../entities/gramma');

var Game = function () {
    this.runner = null;
    this.land = null;
    this.grammas = null;
    this.nextGramma = 640;
};

module.exports = Game;

Game.prototype = {

    create: function () {

        var stageLength = 100;

        this.world.setBounds(0, 0, 360, 640 * stageLength);

        this.physics.startSystem(Phaser.Physics.ARCADE);

        this.land = this.add.tileSprite(0, 0, 360, 640, 'floortile');
        this.land.scale.set(2);
        this.land.smoothed = false;
        this.land.fixedToCamera = true;

        this.runner = new Player(this.game, 360/2, 0);
        this.grammas = this.add.group();

        this.camera.follow(this.runner);

        this.time.events.add(Phaser.Timer.SECOND * 60, this.endGame, this);
    },

    update: function () {

        this.physics.arcade.collide(this.runner, this.grammas);

        this.runner.body.velocity.x = 0;

        // Key press to right
        if (this.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
            this.runner.body.velocity.x = + 300;
        }

        // Key press to left
        if (this.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
            this.runner.body.velocity.x = - 300;
        }


        // the ammount is halved due to scaling
        this.land.tilePosition.x = -this.camera.x / 2;
        this.land.tilePosition.y = -this.camera.y / 2;

        if (this.camera.y > this.nextGramma) {
            this.addGramma();
        }
    },

    render: function () {

        // this.game.debug.bodyInfo(this.runner, 32, 32);
        // this.game.debug.body(this.runner, 32, 32);

    },

    collisionHandler: function (runner, grammas) {
        runner.body.velocity.y = 0;
    },

    addGramma: function () {
        var gramma = new Gramma(
            this.game,
            this.runner.x + (90 - (Math.random() * 180)),
            this.camera.y + 640
        );
        
        // this.game.debug.body(gramma);
        this.grammas.add(gramma);
        this.nextGramma+= 640;
    },

    endGame: function () {

    }
};

},{"../entities/gramma":"/Users/erikrekola/Awesome/GrannySlalom/src/js/entities/gramma.js","../entities/player":"/Users/erikrekola/Awesome/GrannySlalom/src/js/entities/player.js"}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
    this.text = null;
};

module.exports = Menu;

Menu.prototype = {

    create: function () {
        var x = this.game.width / 2;
        var y = this.game.height / 2;

        var style = {font: "65px Arial", fill: "#ffffff", align: "center"};

        this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

        this.input.onDown.add(this.onDown, this);
    },

    update: function () {
    },

    onDown: function () {
        this.game.state.start(playerState.currentLevel);
    }
};

},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
    this.asset = null;
    this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

    preload: function () {
        this.asset = this.add.sprite(320, 240, 'preloader');
        this.asset.anchor.setTo(0.5, 0.5);

        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
        this.load.setPreloadSprite(this.asset);
        this.load.image('floortile', 'assets/floortile.png');
        this.load.spritesheet('runner', 'assets/runner.png', 36, 36);
        this.load.spritesheet('gramma', 'assets/gramma.png', 36, 36);

    },

    create: function () {
        this.asset.cropEnabled = false;
    },

    update: function () {
        if (!!this.ready) {
            this.game.state.start('Menu');
        }
    },

    onLoadComplete: function () {
        this.ready = true;
    }
};

},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
    create: function () {
    }
};
},{}],"/Users/erikrekola/Awesome/GrannySlalom/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function (obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["/Users/erikrekola/Awesome/GrannySlalom/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
